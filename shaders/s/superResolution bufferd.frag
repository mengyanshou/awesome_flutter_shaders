#include <../common/common_header.frag>

// superResolution - Buf D
//
// Conv 3 - 6x6x1 and Bicubic upsampling
//
// Image Super-Resolution Using Deep Convolutional Networks.
// Shadertoy implementation of SRCNN described in https://arxiv.org/pdf/1501.00092.pdf
//
// Created by Dmitry Andreev - and'2017
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

vec4 loadA(int x, int y)
{
    return texture(iChannel0, (vec2(x, y) + 0.5) / iChannelResolution[0].xy);
}

// B = 1,   C = 0   - cubic B-spline
// B = 1/3, C = 1/3 - recommended
// B = 0,   C = 1/2 - Catmull-Rom spline (sharpest)
float cMitchell(float x)
{
    const float B = 0.0;
    const float C = 1.0 / 2.0;

    float ax = abs(x);

    if (ax < 1.0)
    {
        return ((12.0 - 9.0 * B - 6.0 * C) * ax * ax * ax +
            (-18.0 + 12.0 * B + 6.0 * C) * ax * ax + (6.0 - 2.0 * B)) / 6.0;
    }
    else if ((ax >= 1.0) && (ax < 2.0))
    {
        return ((-B - 6.0 * C) * ax * ax * ax +
            (6.0 * B + 30.0 * C) * ax * ax + (-12.0 * B - 48.0 * C) *
            ax + (8.0 * B + 24.0 * C)) / 6.0;
    }
    else
    {
        return 0.0;
    }
}

vec3 bicubic(float x, vec3 c0, vec3 c1, vec3 c2, vec3 c3)
{
    vec3 r = vec3(0);

    r += c0 * cMitchell(x + 1.0);
    r += c1 * cMitchell(x + 0.0);
    r += c2 * cMitchell(1.0 - x);
    r += c3 * cMitchell(2.0 - x);

    return r;
}

vec3 textureBicubic(sampler2D tex, vec2 res, vec2 t, const float bias)
{
    t = t * res - 0.5;

    vec2 f = fract(t);

    t = floor(t) + 0.5;

    vec3 t0 = bicubic(f.x,
        texture(tex, (t + vec2(-1, -1)) / res).xyz,
        texture(tex, (t + vec2( 0, -1)) / res).xyz,
        texture(tex, (t + vec2( 1, -1)) / res).xyz,
        texture(tex, (t + vec2( 2, -1)) / res).xyz);

    vec3 t1 = bicubic(f.x,
        texture(tex, (t + vec2(-1, 0)) / res).xyz,
        texture(tex, (t + vec2( 0, 0)) / res).xyz,
        texture(tex, (t + vec2( 1, 0)) / res).xyz,
        texture(tex, (t + vec2( 2, 0)) / res).xyz);

    vec3 t2 = bicubic(f.x,
        texture(tex, (t + vec2(-1, 1)) / res).xyz,
        texture(tex, (t + vec2( 0, 1)) / res).xyz,
        texture(tex, (t + vec2( 1, 1)) / res).xyz,
        texture(tex, (t + vec2( 2, 1)) / res).xyz);

    vec3 t3 = bicubic(f.x,
        texture(tex, (t + vec2(-1, 2)) / res).xyz,
        texture(tex, (t + vec2( 0, 2)) / res).xyz,
        texture(tex, (t + vec2( 1, 2)) / res).xyz,
        texture(tex, (t + vec2( 2, 2)) / res).xyz);

    return bicubic(f.y, t0, t1, t2, t3);
}

vec4 fetch(const vec2 stc, const int ch, const int y, const int x)
{
    vec2 local_size = iResolution.xy;
    vec2 local_stc = stc;

    vec2 ch_size = floor(iResolution.xy / vec2(3, 1));
    vec2 ch_stc;

    ch_stc.x = floor(float(ch) / 4.0) * ch_size.x;
    ch_stc.y = 0.0;

    ch_stc += local_stc;

    return texture(iChannel1, (ch_stc + 0.5 + vec2(x, 4 - y)) / iChannelResolution[2].xy);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec4  c;
    float val = 0.0;
    vec2  stc = floor(fragCoord.xy);

    // Reconstruct luminance with a single 6x6 convolution of 12 input channels.

    #define C(ch, y, x) c = fetch(stc, ch, y, x);
    #define F(f0, f1, f2, f3) val += dot(vec4(f0, f1, f2, f3), c);

    C(0, 0, 0)F(-0.00351446,0.00295939,0.00348678,0.01086617)
    C(4, 0, 0)F(0.00045127,-0.00132629,-0.00257146,0.00091958)
    C(8, 0, 0)F(-0.00070582,-0.00183283,0.00191495,-0.00238455)
    C(0, 1, 0)F(-0.00612511,-0.00251725,0.00515538,0.0187)
    C(4, 1, 0)F(0.00836052,-0.00617204,-0.00062157,-0.00238186)
    C(8, 1, 0)F(0.00166426,0.0014092,-0.00084613,0.00035721)
    C(0, 2, 0)F(-0.00806507,-0.00493,0.01,-0.00440553)
    C(4, 2, 0)F(0.00173781,-0.00674753,0.00247206,-0.0048747)
    C(8, 2, 0)F(0.0028579,0.00082987,0.00407489,-0.00555691)
    C(0, 3, 0)F(-0.01093632,-0.00572558,0.0112733,-0.03460487)
    C(4, 3, 0)F(0.03830647,-0.03696717,0.00342859,-0.0024113)
    C(8, 3, 0)F(0.0029622,-0.00356101,0.00546178,-0.00640677)
    C(0, 4, 0)F(-0.001737,-0.00467947,0.00215393,-0.01817206)
    C(4, 4, 0)F(0.00982415,-0.0148,0.00353559,-0.00217086)
    C(8, 4, 0)F(0.00081517,0.00267436,0.00425578,-0.00386803)
    C(0, 5, 0)F(-0.00071466,0.00021793,0.00071,0.00940729)
    C(4, 5, 0)F(-0.00241738,0.0043505,-0.00005815,0.00160608)
    C(8, 5, 0)F(-0.00183418,0.00079654,0.00072595,-0.00119)
    C(0, 0, 1)F(0.00437643,-0.00051339,-0.0024492,-0.02795563)
    C(4, 0, 1)F(-0.00037356,-0.00002798,0.00170701,0.00434493)
    C(8, 0, 1)F(-0.00385045,-0.00328069,0.00283315,-0.00332309)
    C(0, 1, 1)F(0.008,-0.00317051,-0.0073894,-0.00054319)
    C(4, 1, 1)F(-0.00195051,0.00268219,0.00246903,-0.001)
    C(8, 1, 1)F(-0.00098941,0.00051914,-0.00030331,0.00223843)
    C(0, 2, 1)F(0.00905984,0.00484156,-0.01121,0.01282)
    C(4, 2, 1)F(-0.00168041,-0.00112627,-0.00032715,0.00136474)
    C(8, 2, 1)F(-0.00130515,0.00235374,-0.00039633,0.00283941)
    C(0, 3, 1)F(0.01814448,0.00828836,-0.01633495,0.02)
    C(4, 3, 1)F(0.0072975,-0.00271804,-0.00489583,0.00822377)
    C(8, 3, 1)F(-0.00162914,-0.00438643,0.00510254,-0.00463271)
    C(0, 4, 1)F(0.0053389,-0.00051851,-0.00424779,0.02073688)
    C(4, 4, 1)F(0.01115845,-0.01650364,0.00070977,-0.00251249)
    C(8, 4, 1)F(0.00166848,-0.00496334,-0.00501119,0.00415624)
    C(0, 5, 1)F(-0.00153355,0.00222806,0.00144618,-0.00469521)
    C(4, 5, 1)F(-0.00803807,0.01,-0.003,-0.00126027)
    C(8, 5, 1)F(0.00177767,0.00178174,0.00171077,-0.00171697)
    C(0, 0, 2)F(0.0044618,-0.00156725,-0.00592573,-0.03567032)
    C(4, 0, 2)F(0.0008857,-0.00121977,0.00213931,0.00319787)
    C(8, 0, 2)F(-0.00390982,-0.00108124,0.00061069,0.00004329)
    C(0, 1, 2)F(-0.00161138,0.00075456,-0.00000097,0.01666664)
    C(4, 1, 2)F(0.00012306,0.001,0.00053903,-0.00440154)
    C(8, 1, 2)F(0.00308909,0.00522174,-0.00205641,0.00145743)
    C(0, 2, 2)F(-0.00650194,0.0171419,0.00717652,0.01013387)
    C(4, 2, 2)F(0.00464069,-0.00431937,-0.0163497,-0.00441018)
    C(8, 2, 2)F(0.00389743,0.00817269,-0.00567924,0.00690274)
    C(0, 3, 2)F(-0.0086457,0.00289117,0.00430285,-0.00276493)
    C(4, 3, 2)F(0.02094857,-0.0277664,-0.00196656,0.01463915)
    C(8, 3, 2)F(-0.017,-0.00132498,-0.02114368,0.01797535)
    C(0, 4, 2)F(0.01229748,-0.00514671,-0.01163268,0.0036593)
    C(4, 4, 2)F(0.01168708,-0.01180411,0.00794236,0.00221342)
    C(8, 4, 2)F(-0.00345081,0.00693983,-0.00276887,0.00730968)
    C(0, 5, 2)F(-0.01042707,0.00488621,0.00942085,0.0095552)
    C(4, 5, 2)F(-0.00118139,0.00235663,-0.00595082,-0.00341906)
    C(8, 5, 2)F(0.00335706,0.00563086,-0.00166246,0.00086624)
    C(0, 0, 3)F(0.00229853,-0.00524362,-0.00167594,0.00455854)
    C(4, 0, 3)F(-0.0009744,0.00147137,0.00384814,0.0024445)
    C(8, 0, 3)F(-0.003088,-0.00656954,0.00298292,-0.00281983)
    C(0, 1, 3)F(-0.00663323,-0.00172808,0.00583134,0.018849)
    C(4, 1, 3)F(0.00535728,-0.00642662,0.00129886,0.00002421)
    C(8, 1, 3)F(0.0009507,0.00129439,-0.00357376,0.00090546)
    C(0, 2, 3)F(-0.0005863,-0.00312956,0.00443886,-0.01553692)
    C(4, 2, 3)F(-0.00867062,0.01014164,-0.00057495,-0.01255229)
    C(8, 2, 3)F(0.01523018,0.00006842,0.00940459,-0.00684986)
    C(0, 3, 3)F(-0.00762155,-0.01872233,0.0066778,-0.00556319)
    C(4, 3, 3)F(-0.00679776,0.0093582,0.01407626,-0.00096806)
    C(8, 3, 3)F(0.00204611,-0.01691971,0.0137738,-0.01686179)
    C(0, 4, 3)F(0.00690628,-0.00275081,-0.00861448,-0.01395018)
    C(4, 4, 3)F(-0.00818415,0.00908822,0.00627839,-0.00009538)
    C(8, 4, 3)F(-0.001,-0.00155,0.00561848,-0.00722778)
    C(0, 5, 3)F(-0.00941427,0.00474623,0.01096883,-0.00345726)
    C(4, 5, 3)F(0.0057046,-0.00644603,-0.00338494,-0.00514077)
    C(8, 5, 3)F(0.00455451,-0.00510219,0.00006587,-0.00014436)
    C(0, 0, 4)F(0.00211751,-0.00257602,-0.00317558,-0.00774556)
    C(4, 0, 4)F(-0.00036749,0.00089582,0.00251946,0.00046646)
    C(8, 0, 4)F(-0.00048038,-0.00044347,0.00101065,-0.001015)
    C(0, 1, 4)F(-0.00054915,0.00010671,0.0010155,0.0154)
    C(4, 1, 4)F(0.00344185,-0.00456773,0.0014,0.0026547)
    C(8, 1, 4)F(-0.00407896,0.00186302,0.00045663,0.00082582)
    C(0, 2, 4)F(-0.002,0.00033,0.00428,0.0024057)
    C(4, 2, 4)F(-0.005651,0.00571041,-0.0026,0.00107123)
    C(8, 2, 4)F(-0.00167793,0.00286365,0.00140161,-0.00166331)
    C(0, 3, 4)F(0.00093457,0.00069406,-0.00131938,-0.01677026)
    C(4, 3, 4)F(-0.00775682,0.00830363,-0.00239213,0.0013892)
    C(8, 3, 4)F(-0.00110915,0.00327647,0.00481028,-0.00460168)
    C(0, 4, 4)F(0.00809064,0.0015098,-0.00552941,-0.00497923)
    C(4, 4, 4)F(-0.00529672,0.00579133,-0.00282269,-0.00127692)
    C(8, 4, 4)F(0.002,0.00275793,0.00102498,0.00218349)
    C(0, 5, 4)F(-0.003,0.00177685,0.0023859,0.00548968)
    C(4, 5, 4)F(0.00041167,-0.0012298,-0.00185702,-0.00173367)
    C(8, 5, 4)F(0.00298512,0.00355975,0.00173601,-0.00204575)
    C(0, 0, 5)F(0.00162489,0.00098652,-0.00167976,-0.01751723)
    C(4, 0, 5)F(0.0005,-0.00074233,-0.00071144,-0.00206626)
    C(8, 0, 5)F(0.00313231,-0.00038876,0.00239279,-0.00286974)
    C(0, 1, 5)F(0.00182831,0.00369742,-0.00142315,0.00430287)
    C(4, 1, 5)F(-0.00450609,0.00517208,-0.00196407,0.00023938)
    C(8, 1, 5)F(0.00002449,0.00076561,-0.00112265,0.00144857)
    C(0, 2, 5)F(-0.00079172,0.00446152,-0.00081561,0.00501851)
    C(4, 2, 5)F(0.0066961,-0.00729496,-0.00249268,-0.00017788)
    C(8, 2, 5)F(0.00057479,0.00313447,-0.00512984,0.00436886)
    C(0, 3, 5)F(0.00514397,0.00224223,-0.00616465,0.00575604)
    C(4, 3, 5)F(0.00067425,-0.00060911,0.00051277,0.00162658)
    C(8, 3, 5)F(-0.00370987,-0.00339403,-0.00846926,0.00817676)
    C(0, 4, 5)F(0.00011564,-0.00056051,-0.00065373,0.00774179)
    C(4, 4, 5)F(0.00340144,-0.00376592,-0.00085788,0.002)
    C(8, 4, 5)F(-0.00346563,0.00122545,-0.00443362,0.0048959)
    C(0, 5, 5)F(-0.00296302,-0.00383445,0.00332275,0.00244432)
    C(4, 5, 5)F(-0.00008264,0.00006626,0.0021196,0.00137287)
    C(8, 5, 5)F(-0.00156066,0.00091643,-0.00072657,0.00007617)

    // Bias
    val += 0.3150385;

    // Upsample source image using bicubic filter.
    fragColor.rgb = textureBicubic(iChannel0, iChannelResolution[0].xy, 0.5 * fragCoord / iChannelResolution[0].xy,00);
    
    // Put SRCNN output luminocity into alpha channel.
    fragColor.a = val;
}
#include <../common/main_shadertoy.frag>